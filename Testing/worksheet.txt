
1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]

    temp = my_list[7]
    my_list[7] = my_list[6]
    my_list[6] = temp

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]

    temp = my_list[3]
    my_list[3] = my_list[0]
    my_list[0] = temp

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

you are setting the my_list[1] to the temp value so the 32 will go away and you will just get two 70s

4. Show how the following numbers can be sorted using the selection sort. Show the numbers after each iteration
of the outer loop, similar to what is shown in the book. I am NOT looking for a copy of the code to do the sort.
If you include any code for problems 4-7 you are doing it wrong.

97   74    8   98   47   62   12   11    0   60
0   74    8   98   47   62   12   11    97   60
0    8   74   98   47   62   12   11    97   60
0    8    11  98   47   62   12   74    97   60
0    8    11   12  47   62   98   74    97   60
0    8    11   12  47   62   98   74    97   60
0    8    11   12  47   60  98   74    97    62
0    8    11   12  47   60   62  74    97    98

5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25
0   92   18   47   40   58    74   36   29   25
0   18   92   47   40   58    74   36   29   25
0   18   25   47   40   58    74   36   29   92
0   18   25   29   40   58    74   36   47   92
0   18   25   29   36   58    74   40   47   92
0   18   25   29   36   40    74   58   47   92
0   18   25   29   36   40    47   58   74   92
0   18   25   29   36   40    47   58   74   92

6. Show how the following numbers can be sorted using the INSERTION sort. (Note: If you think the 0 gets
immediately sorted into position, you are doing it wrong. Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25
18   74   92   47   40   58    0   36   29   25
18   47   74   92   40   58    0   36   29   25
18   40   47   74   92   58    0   36   29   25
18   40   47   58    74   92   0   36   29   25
0   18   40   47   58    74   92   36   29   25
0   18   36   40   47   58    74   92   29   25
0   18   29   36   40   47   58    74   92   25
0   18   25   29   36   40   47   58    74   92

7. Show how the following numbers can be sorted using the insertion sort:

    37   11   14   50   24    7   17   88   99    9
   11    37   14   50   24    7   17   88   99    9
   11    14   37   50   24    7   17   88   99    9
   11    14   24    37   50   7   17   88   99    9
   7   11    14   24    37   50   17   88   99    9
   7   11    14   17   24    37   50   88   99    9
   7    9   11    14   17   24    37   50   88   99

8. Explain what `min_pos` does in the selection sort.
    it keeps the position of the smallest value in the list

9. Explain what `cur_pos` does in the selection sort.
    it is the current position that you are trying to sort

10. Explain what `scan_pos` does in the selection sort.
    it scans through your list to find ony values smaller than the cur_pos

11. Explain what `key_pos` and `key_value` are in the insertion sort.
    the key_pos is what postition you have sorted up to
    key_value is what you are trying to sort into that you have sorted

12. Explain `scan_pos` in the insertion sort.
    it takes in the key vale scans left to see where it should put it

13. Look at the example sort program at the very end of this chapter:

https://learn.arcade.academy/en/latest/chapters/30_sorting/sorting.html


Modify the sorts to print the number of times the inside loop is run, and the number of times the outside loop
is run. Modify the program to work with a list of 100. Paste the code you used here. Run the program and list
the numbers you got here. (DON'T FORGET TO INCLUDE THE RESULTS!) Inside loop for selection sort should be about
5,000, and insertion sort 2,500. Double-check if you don't get numbers close to these.
selection:
Original List
    53 38 57 28 61 44 29 96 41 28 56 40 39 94 42 68 38 15 32  3 10 96 81 78 17 68 61 81 56 22 37 29 81 10 67  1 67 94 84 46 73 20 49 86 24  6 66 97 42 96 96 13 27 67 57 27 91 59 24 33 14 47 68  9 21 48  9 53 62 59 90 26 80 43 85 11 56 25 99 29 75  5 79 26 73 30  3 49 84 33 56 82 84 98 26 94 13 51 12 73
Selection Sort
    inside 4950
    outside 100
  1  3  3  5  6  9  9 10 10 11 12 13 13 14 15 17 20 21 22 24 24 25 26 26 26 27 27 28 28 29 29 29 30 32 33 33 37 38 38 39 40 41 42 42 43 44 46 47 48 49 49 51 53 53 56 56 56 56 57 57 59 59 61 61 62 66 67 67 67 68 68 68 73 73 73 75 78 79 80 81 81 81 82 84 84 84 85 86 90 91 94 94 94 96 96 96 96 97 98 99
Insertion Sort
    outside 99
    inside 2402
  1  3  3  5  6  9  9 10 10 11 12 13 13 14 15 17 20 21 22 24 24 25 26 26 26 27 27 28 28 29 29 29 30 32 33 33 37 38 38 39 40 41 42 42 43 44 46 47 48 49 49 51 53 53 56 56 56 56 57 57 59 59 61 61 62 66 67 67 67 68 68 68 73 73 73 75 78 79 80 81 81 81 82 84 84 84 85 86 90 91 94 94 94 96 96 96 96 97 98 99
